(()=>{var t={738:(t,e,n)=>{const o=n(747),r=n(622);function s(t){console.log(`[dotenv][DEBUG] ${t}`)}const c=/^\s*([\w.-]+)\s*=\s*(.*)?\s*$/,i=/\\n/g,l=/\n|\r|\r\n/;t.exports.v=function(t){let e=r.resolve(process.cwd(),".env"),n="utf8",a=!1;t&&(null!=t.path&&(e=t.path),null!=t.encoding&&(n=t.encoding),null!=t.debug&&(a=!0));try{const t=function(t,e){const n=Boolean(e&&e.debug),o={};return t.toString().split(l).forEach((function(t,e){const r=t.match(c);if(null!=r){const t=r[1];let e=r[2]||"";const n=e.length-1,s='"'===e[0]&&'"'===e[n];"'"===e[0]&&"'"===e[n]||s?(e=e.substring(1,n),s&&(e=e.replace(i,"\n"))):e=e.trim(),o[t]=e}else n&&s(`did not match key and value when parsing line ${e+1}: ${t}`)})),o}(o.readFileSync(e,{encoding:n}),{debug:a});return Object.keys(t).forEach((function(e){Object.prototype.hasOwnProperty.call(process.env,e)?a&&s(`"${e}" is already defined in \`process.env\` and will not be overwritten`):process.env[e]=t[e]})),{parsed:t}}catch(t){return{error:t}}}},747:t=>{"use strict";t.exports=require("fs")},622:t=>{"use strict";t.exports=require("path")}},e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={exports:{}};return t[o](r,r.exports,n),r.exports}(()=>{"use strict";const t=require("net");n(738).v();const e={host:process.env.HOST,port:process.env.PORT},o=new class{constructor(){if(this.host=e.host,this.port=e.port,this.client=new t.Socket,!this.host||!this.port)throw new Error("Connect parameters are undefined.");this.connect(this.host,parseInt(this.port))}connect(t,e){console.log(`Connecting to ${t}:${e} ...`),this.client.connect(e,t,(()=>{console.log("Socket connected"),this.client.write(JSON.stringify({type:"SUBSCRIBE"}))}))}};let r="",s=0;o.client.on("data",(t=>{for(var e=0,n=t.length;e<n;e++){let n=String.fromCodePoint(t[e]);"{"===n?s++:"}"===n&&s--,r+=n,s<=0&&(o=r,console.log(`Received Msg: ${o}`),r="")}var o}))})()})();